1.Python program that implements the enqueue() operation.
class Queue:
    def __init__(self):
        self.queue = []
    def enqueue(self, item):
        self.queue.append(item)
        print(f"Enqueued {item}")
    def display(self):
        print(f"Queue: {self.queue}")
       q = Queue()
q.enqueue(10)
q.enqueue(20)
q.display()
2. Write a Python program to sort a list of elements using the bubble sort.Algorithm takes input from user.
elements = input("Enter the list of elements (separated by space): ").split()
elements = [int(x) for x in elements]
print("Original List:")
print(elements)
n = len(elements)
for i in range(n-1):
    for j in range(n-i-1):
        if elements[j] > elements[j+1]:
            elements[j], elements[j+1] = elements[j+1], elements[j]
print("Sorted List:")
print(elements)
3. Write a Python program that implements the peek() operation.
def stack_operations(stack):
    stack.append(1)
    stack.append(2)
    stack.append(3)
    stack.append(4)
    print("Original Stack:")
    print(stack)
    top_element = stack[-1]
    print("Top element of the stack (Peek):")
    print(top_element)
stack = []
stack_operations(stack)
4. Write a Python program to sort a list of elements using insertion sort algorithm take input from user.
elements = input("Enter the list of elements (separated by space): ").split()
elements = [int(x) for x in elements]
print("Original List:")
print(elements)
for i in range(1, len(elements)):
    key = elements[i]
    j = i-1
    while j >= 0 and key < elements[j]:
        elements[j+1] = elements[j]
        j -= 1
    elements[j+1] = key
print("Sorted List:")
print(elements)
5. Write a Python program to append a new item to the end of the array.
arr = [1, 2, 3, 4]
def append_item(arr, item):
    arr.append(item)
item = int(input("Enter an item to append: "))
append_item(arr, item)
print(f"Array after appending: {arr}")
6. Write a python program to implement isEmpty() operation
stack = []  # Initialize an empty stack
if len(stack) == 0:
    print("Stack is empty.")
else:
    print("Stack is not empty.")
7. Write a Python program to sort a list of elements using insertion sort algorithm take input from user.
elements = input("Enter the list of elements (separated by space): ").split()
elements = [int(x) for x in elements]
print("Original List:")
print(elements)
for i in range(1, len(elements)):
    key = elements[i]
    j = i-1
    while j >= 0 and key < elements[j]:
        elements[j+1] = elements[j]
        j -= 1
    elements[j+1] = key
print("Sorted List:")
print(elements)
8. Write a python program to create a Binary tree. Check whether it is a BST or not.
class Node:
    def __init__(self, key):
        self.left = None
        self.right = None
        self.val = key
def is_bst(root, left=None, right=None):
    if root is None:
        return True
    if left is not None and root.val <= left.val:
        return False
    if right is not None and root.val >= right.val:
        return False
    return is_bst(root.left, left, root) and is_bst(root.right, root, right)
root = Node(10)
root.left = Node(5)
root.right = Node(20)
print(f"Is the tree a BST? {'Yes' if is_bst(root) else 'No'}")
9. Write a python program to display Adjacency list representation of graph.
from collections import defaultdict
class Graph:
    def __init__(self):
        self.graph = defaultdict(list)
    def add_edge(self, u, v):
        self.graph[u].append(v)
    def display(self):
        for node in self.graph:
            print(f"{node} -> {self.graph[node]}")
g = Graph()
g.add_edge(0, 1)
g.add_edge(0, 4)
g.add_edge(1, 2)
g.add_edge(1, 3)
g.add_edge(1, 4)
g.add_edge(2, 3)
g.add_edge(3, 4)
g.display()

10. Write a Python program that implements the peek() operation.
def stack_operations(stack):
    stack.append(1)
    stack.append(2)
    stack.append(3)
    stack.append(4)
    print("Original Stack:")
    print(stack)
    top_element = stack[-1]
    print("Top element of the stack (Peek):")
    print(top_element)
stack = []
stack_operations(stack)
11. Write a python program to display Adjacency Matrix representation of graph
def create_adj_matrix(vertices, edges):
    adj_matrix = [[0 for _ in range(vertices)] for _ in range(vertices)]
    for u, v in edges:
        adj_matrix[u][v] = 1
        adj_matrix[v][u] = 1  
    return adj_matrix
def display_matrix(matrix):
    for row in matrix:
        print(row)
vertices = 5
edges = [(0, 1), (0, 4), (1, 2), (1, 3), (1, 4), (2, 3), (3, 4)]
adj_matrix = create_adj_matrix(vertices, edges)
display_matrix(adj_matrix)
12. Write a python program to implement circular queue of integers using list.
queue = [None] * 5  # assuming a fixed size of 5 for the queue
front = 0
rear = 0
def enqueue(element):
    global rear
    queue[rear] = element
    rear = (rear + 1) % len(queue)
def dequeue():
    global front
    element = queue[front]
    queue[front] = None
    front = (front + 1) % len(queue)
    return element
enqueue("Apple")
enqueue("Banana")
enqueue("Cherry")
enqueue("Date")
enqueue("Elderberry")
print("Queue:", queue)
print("Dequeued:", dequeue())
print("Queue:", queue)
enqueue("Fig")
print("Queue:", queue)
13. Write a Python program to count the number of items of a given doubly linked list.
class Node:
    def __init__(self, data):
        self.data = data
        self.prev = None
        self.next = None
class DoublyLinkedList:
    def __init__(self):
        self.head = None
    def append(self, data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
        else:
            last = self.head
            while last.next:
                last = last.next
            last.next = new_node
            new_node.prev = last
    def count_items(self):
        count = 0
        current = self.head
        while current:
            count += 1
            current = current.next
        return count
dll = DoublyLinkedList()
dll.append(1)
dll.append(2)
dll.append(3)
print(f"Number of items: {dll.count_items()}")
14. Write a python program to implement mirror image of binary search tree.
class Node:
    def __init__(self, key):
        self.left = None
        self.right = None
        self.val = key
def mirror(root):
    if root is None:
        return
    else:
        root.left, root.right = root.right, root.left
        mirror(root.left)
        mirror(root.right)
def inorder(root):
    if root:
        inorder(root.left)
        print(root.val, end=" ")
        inorder(root.right)
root = Node(10)
root.left = Node(5)
root.right = Node(20)
print("Original Inorder Traversal:")
inorder(root)
mirror(root)
print("\nMirror Image Inorder Traversal:")
inorder(root)
15. Write a Python program to delete the first item from a singly linked list.
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
class SinglyLinkedList:
    def __init__(self):
        self.head = None
    def append(self, data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
        else:
            last = self.head
            while last.next:
                last = last.next
            last.next = new_node
    def delete_first(self):
        if self.head is None:
            print("List is empty")
        else:
            self.head = self.head.next
    def display(self):
        current = self.head
        while current:
            print(current.data, end=" -> ")
            current = current.next
        print("None")
ll = SinglyLinkedList()
ll.append(10)
ll.append(20)
ll.append(30)
print("Before deletion:")
ll.display()
ll.delete_first()
print("After deletion:")
ll.display()
16. Write a python program to reverse string using stack data structure.
class Stack:
    def __init__(self):
        self.stack = []
    def push(self, item):
        self.stack.append(item)
    def pop(self):
        if not self.is_empty():
            return self.stack.pop()
        return None
    def is_empty(self):
        return len(self.stack) == 0
def reverse_string(s):
    stack = Stack()
    for char in s:
        stack.push(char)
    reversed_str = ''
    while not stack.is_empty():
        reversed_str += stack.pop()
    return reversed_str
s = input("Enter a string to reverse: ")
reversed_s = reverse_string(s)
print(f"Reversed string: {reversed_s}")
17. Write a python program to reverse the elements of a queue.
from collections import deque
def reverse_queue(q):
    stack = []
    while q:
        stack.append(q.popleft())
    while stack:
        q.append(stack.pop())
q = deque([1, 2, 3, 4, 5])
print(f"Original Queue: {list(q)}")
reverse_queue(q)
print(f"Reversed Queue: {list(q)}")
18. Write a Python program that implements the insert operation in tree.
root = ["A", ["B", ["D", [], []], ["E", [], []]], ["C", ["F", [], []], ["G", [], []]]]
def insert_tree(node, value):
    if value < node[0]:
        if node[1]: insert_tree(node[1], value)
        else: node[1] = [value, [], []]
    else:
        if node[2]: insert_tree(node[2], value)
        else: node[2] = [value, [], []]
insert_tree(root, "H")
print(root)
19. Write a Python program to print a given doubly linked list in reverse order.
class Node:
    def __init__(self, data):
        self.data = data
        self.prev = None
        self.next = None
class DoublyLinkedList:
    def __init__(self):
        self.head = None
    def append(self, data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
        else:
            last = self.head
            while last.next:
                last = last.next
            last.next = new_node
            new_node.prev = last
    def reverse_print(self):
        if self.head is None:
            print("List is empty")
            return
        last = self.head
        while last.next:
            last = last.next
        while last:
            print(last.data, end=" <- ")
            last = last.prev
        print("None")
dll = DoublyLinkedList()
dll.append(1)
dll.append(2)
dll.append(3)
dll.reverse_print()
20. Write a python program to reverse the elements of a queue. 
from collections import deque
def reverse_queue(q):
    stack = []
    while q:
        stack.append(q.popleft())
    while stack:
        q.append(stack.pop())
q = deque([1, 2, 3, 4, 5])
print(f"Original Queue: {list(q)}")
reverse_queue(q)
print(f"Reversed Queue: {list(q)}")
